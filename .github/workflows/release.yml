name: Release

on:
  workflow_dispatch:
    inputs:
      version_major:
        description: Specify whether the major version (<major>.minor.patch.post) should be updated.
        type: boolean
        required: false
        default: false
      version_minor:
        description: Specify whether the minor version (major.<minor>.patch.post) should be updated.
        type: boolean
        required: false
        default: false
      version_patch:
        description: Specify whether the patch version (major.minor.<patch>.post) should be updated.
        type: boolean
        required: false
      version_post:
        description: Specify whether the post version (major.minor.patch.<post>) should be updated.
        type: boolean
        required: false
        default: true

env:
 UV_PUBLISH_TOKEN: ${{ secrets.PYPI_TOKEN }}
 VERSION_MAJOR: ${{ github.event.inputs.version_major }}
 VERSION_MINOR: ${{ github.event.inputs.version_minor }}
 VERSION_PATCH: ${{ github.event.inputs.version_patch }}
 VERSION_POST: ${{ github.event.inputs.version_post }}
jobs:
  android:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '^1.21.5'
    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          **/.venv
        key: ${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
    - name: install deps
      run: |
        uv sync --dev
        uv run task version --set-url "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" info
        bash bump_version.sh
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "32.1"
    - name: build
      run: |
        # uv run task goneonize_changed
        export CGO_ENABLED=1
        wget https://dl.google.com/android/repository/android-ndk-r26b-linux.zip > /dev/null
        unzip android-ndk-r26b-linux.zip > /dev/null
        export ANDROID_NDK_HOME=$(pwd)/android-ndk-r26b
        export PATH=$PATH:$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin
        #ARM64/AARCH64
        export CC=$(which aarch64-linux-android28-clang)
        export CXX=$(which aarch64-linux-android28-clang++)
        export GOOS=android
        export GOARCH=arm64
        uv run task build all
        #ARM
        export CC=$(which armv7a-linux-androideabi28-clang)
        export CXX=$(which armv7a-linux-androideabi28-clang++)
        export GOOS=android
        export GOARCH=arm
        uv run task build goneonize
        #AMD64/x86_64
        export CC=$(which x86_64-linux-android28-clang)
        export CXX=$(which x86_64-linux-android28-clang++)
        export GOOS=android
        export GOARCH=amd64
        uv run task build goneonize
        #386/686
        export CC=$(which i686-linux-android28-clang)
        export CXX=$(which i686-linux-android28-clang++)
        export GOOS=android
        export GOARCH=386
        uv run task build goneonize
      continue-on-error: true
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with: 
        name: Android
        path: neonize/*.so
  zig:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '^1.21.5'
    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - uses: mlugg/setup-zig@v2
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "32.1"
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          **/.venv
        key: ${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
    - name: install deps
      run: |
        uv sync --dev
        uv run task version --set-url "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" info
        bash bump_version.sh
    - name: build
      run: |
        # uv run task goneonize_changed
        mkdir LIBS
        export CGO_ENABLED=1
        #AMD64
        export GOOS=windows
        export GOARCH=amd64
        export CC="zig cc -target x86_64-windows"
        uv run task build goneonize
        uv build
        uv run task repack
        mv neonize/*.dll LIBS
        #ARM64
        export GOOS=windows
        export GOARCH=arm64
        export CC="zig cc -target aarch64-windows"
        uv run task build goneonize
        uv build
        uv run task repack
        mv neonize/*.dll LIBS
        #X86 / 386
        export GOOS=windows
        export GOARCH=386
        export CC="zig cc -target x86-windows"
        uv run task build goneonize
        uv build
        uv run task repack
        mv neonize/*.dll LIBS
        #LINUX x86/386
        export GOOS=linux
        export GOARCH=386
        export CC="zig cc -target x86-linux"
        uv run task build goneonize
        uv build
        uv run task repack
        mv neonize/*.so LIBS
        cp dist/*.whl LIBS/
        if [[ $UV_PUBLISH_TOKEN ]];then
          uv publish
        fi
      continue-on-error: true
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with: 
        name: Zig
        path: |
          LIBS/*
  linux:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '^1.21.5'
    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "32.1"
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          **/.venv
        key: ${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
    - name: install deps
      run: |
        uv sync --dev
        uv run task version --set-url "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" info
        bash bump_version.sh
    - name: Installing Dev Package
      run: sudo apt update && sudo apt install wget gcc-aarch64-linux-gnu gcc-s390x-linux-gnu gcc-riscv64-linux-gnu -y
    - name: build
      run: |
        # uv run task goneonize_changed
        mkdir LIBS
        #AMD64/X86_64
        export CGO_ENABLED=1
        uv run task build all
        uv build
        uv run task repack
        mv neonize/*.so LIBS
        #ARM64/AARCH64
        export GOOS=linux
        export GOARCH=arm64
        export CC=$(which aarch64-linux-gnu-gcc)
        export CXX=$(which aarch64-linux-gnu-cpp)
        uv run task build goneonize
        uv build
        uv run task repack
        mv neonize/*.so LIBS
        #RISCV64
        export GOOS=linux
        export GOARCH=riscv64
        export CC=$(which riscv64-linux-gnu-gcc)
        export CXX=$(which riscv64-linux-gnu-cpp)
        uv run task build goneonize
        mv neonize/*.so LIBS
        #S390X
        export GOOS=linux
        export GOARCH=s390x
        export CC=$(which s390x-linux-gnu-gcc)
        export CXX=$(which s390x-linux-gnu-cpp)
        uv run task build goneonize
        uv build
        uv run task repack
        mv neonize/*.so LIBS
        cp dist/*.whl LIBS/
        if [[ $UV_PUBLISH_TOKEN ]];then
          uv publish
        fi
      continue-on-error: true
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with: 
        name: Linux
        path: LIBS/*
  darwin:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: '^1.21.5'
    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "32.1"
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          **/.venv
        key: ${{ runner.os }}-${{ hashFiles('**/uv.lock') }}
    - name: install deps
      run: |
        uv sync --dev
        uv run task version --set-url "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" info
        bash bump_version.sh
    - name: build
      run: |
        # uv run task goneonize_changed
        mkdir LIBS
        export PATH="/Users/runner/.local/bin:$PATH"
        # Set necessary environment variables for building on Darwin
        export CGO_ENABLED=1
        # Build for Darwin (macOS)
        
        # AMD64/X86_64
        export GOOS=darwin
        export GOARCH=amd64
        export CC=$(which clang)
        export CXX=$(which clang++)
        uv run task build all
        uv build
        uv run task repack
        mv neonize/*.dylib LIBS/
        
        #ARM64/AARCH64
        export GOOS=darwin
        export GOARCH=arm64
        export CC=$(which clang)
        export CXX=$(which clang++)
        uv run task build goneonize
        uv build
        uv run task repack
        cp dist/*.whl LIBS/
        mv neonize/*.dylib LIBS/
        if [[ $UV_PUBLISH_TOKEN ]];then
          uv publish
        fi
      continue-on-error: true
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with: 
        name: Darwin
        path: LIBS/*
  # musl:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       include:
  #         - arch: x86
  #           goarch: 386
  #         - arch: aarch64
  #           goarch: arm64
  #         - arch: x86_64
  #           goarch: amd64
  #         - arch: armv7
  #           goarch: arm
  #         - arch: ppc64le
  #           goarch: ppc64le
  #         - arch: s390x
  #           goarch: s390x
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Setup latest Alpine Linux
  #       uses: jirutka/setup-alpine@v1
  #       with:
  #         alpine-version: 'latest'
  #         arch: ${{ matrix.arch }}
  #         chroot: true
  #         packages: |
  #           linux-headers
  #           python3-dev
  #           go
  #           python3
  #           uv
  #           musl
  #           musl-dev
  #           musl-utils
  #           git
  #           gcc
  #           py3-pillow
  #           build-base
  #           zlib-dev
  #           jpeg-dev
  #           freetype-dev
  #           lcms2-dev
  #           bash
  #     - name: Run script inside Alpine chroot as the default user (unprivileged)
  #       run: |
  #         export CGO_ENABLED=1
  #         export GOARCH=${{ matrix.goarch }}
  #         go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  #         go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
  #         ls -la  # as you would expect, you're in your workspace directory
  #         uv sync
  #         uv sync --dev
  #         uv run task version --set-url "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" info
  #         bash bump_version.sh
  #         uv run task build goneonize
  #         uv build
  #         uv run task repack
  #       shell: alpine.sh {0}
  #     - name: push to pypi
  #       run: |
  #         export UV_PUBLISH_TOKEN=${UV_PUBLISH_TOKEN}
  #         if [[ $UV_PUBLISH_TOKEN ]];then
  #           uv publish
  #         fi
  #         mkdir LIBS
  #         mv dist/*.whl LIBS/
  #       shell: alpine.sh {0}
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v4
  #       with: 
  #         name: Musl ${{ matrix.arch }}
  #         path: LIBS/*
  release:
    runs-on: ubuntu-latest
    needs: [android, zig, linux, darwin]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
        path: sharedlib
    - name: Install uv
      uses: astral-sh/setup-uv@v5
    - name: Install Protoc
      uses: arduino/setup-protoc@v3
      with:
        version: "32.1"
    - name: install deps
      run: |
        uv sync --dev
        uv run task version --set-url "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" info
        bash bump_version.sh
        uv run task build proto
        echo "TAG_NAME=$(uv run task version neonize)" >> $GITHUB_ENV
        ls -R
        ls -lah sharedlib
    - name: Upload shared library to draft release
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        files: |
          sharedlib/*.so
          sharedlib/*.dll
          sharedlib/*.dylib
          sharedlib/*.whl
        generate_release_notes: true
        tag_name: ${{ env.TAG_NAME }}
    - name: Publish
      run: |
        if [[ $UV_PUBLISH_TOKEN ]];then
          uv build && uv publish
        fi
